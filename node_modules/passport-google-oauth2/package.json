{
  "_args": [
    [
      {
        "raw": "passport-google-oauth2@^0.1.6",
        "scope": null,
        "escapedName": "passport-google-oauth2",
        "name": "passport-google-oauth2",
        "rawSpec": "^0.1.6",
        "spec": ">=0.1.6 <0.2.0",
        "type": "range"
      },
      "E:\\TayDoTech\\Nodejs\\Project\\deployapp"
    ]
  ],
  "_from": "passport-google-oauth2@>=0.1.6 <0.2.0",
  "_id": "passport-google-oauth2@0.1.6",
  "_inCache": true,
  "_location": "/passport-google-oauth2",
  "_nodeVersion": "1.1.0",
  "_npmUser": {
    "name": "mstade",
    "email": "marcus@stade.se"
  },
  "_npmVersion": "2.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "passport-google-oauth2@^0.1.6",
    "scope": null,
    "escapedName": "passport-google-oauth2",
    "name": "passport-google-oauth2",
    "rawSpec": "^0.1.6",
    "spec": ">=0.1.6 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/passport-google-oauth2/-/passport-google-oauth2-0.1.6.tgz",
  "_shasum": "dfd7016ac7449fe27cfeb252ae974afc23257a0d",
  "_shrinkwrap": null,
  "_spec": "passport-google-oauth2@^0.1.6",
  "_where": "E:\\TayDoTech\\Nodejs\\Project\\deployapp",
  "author": {
    "name": "Marcus Stade",
    "email": "marcus@stade.se"
  },
  "bugs": {
    "url": "https://github.com/mstade/passport-google-oauth2/issues"
  },
  "dependencies": {
    "passport-oauth2": "^1.1.2"
  },
  "description": "Passport strategy for Google OAuth 2.0",
  "devDependencies": {
    "vows": "^0.8.0"
  },
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "dist": {
    "shasum": "dfd7016ac7449fe27cfeb252ae974afc23257a0d",
    "tarball": "https://registry.npmjs.org/passport-google-oauth2/-/passport-google-oauth2-0.1.6.tgz"
  },
  "gitHead": "f45b0e989bd9ce69d879656ebb099f1969a6910a",
  "homepage": "https://github.com/mstade/passport-google-oauth2",
  "keywords": [
    "auth",
    "google",
    "google+",
    "passportjs",
    "oauth2"
  ],
  "license": "ISC",
  "main": "./lib/oauth2.js",
  "maintainers": [
    {
      "name": "mstade",
      "email": "marcus@stade.se"
    }
  ],
  "name": "passport-google-oauth2",
  "optionalDependencies": {},
  "readme": "# Passport strategy for Google OAuth 2.0\n\n[Passport](http://passportjs.org/) strategies for authenticating with [Google](http://www.google.com/)\nusing ONLY OAuth 2.0.\n\nThis module lets you authenticate using Google in your Node.js applications.\nBy plugging into Passport, Google authentication can be easily and\nunobtrusively integrated into any application or framework that supports\n[Connect](http://www.senchalabs.org/connect/)-style middleware, including\n[Express](http://expressjs.com/).\n\n## Install\n\n    $ npm install passport-google-oauth2\n\n## Usage of OAuth 2.0\n\n#### Configure Strategy\n\nThe Google OAuth 2.0 authentication strategy authenticates users using a Google\naccount and OAuth 2.0 tokens.  The strategy requires a `verify` callback, which\naccepts these credentials and calls `done` providing a user, as well as\n`options` specifying a client ID, client secret, and callback URL.\n\n```Javascript\nvar GoogleStrategy = require( 'passport-google-oauth2' ).Strategy;\n\npassport.use(new GoogleStrategy({\n    clientID:     GOOGLE_CLIENT_ID,\n    clientSecret: GOOGLE_CLIENT_SECRET,\n    callbackURL: \"http://yourdormain:3000/auth/google/callback\",\n    passReqToCallback   : true\n  },\n  function(request, accessToken, refreshToken, profile, done) {\n    User.findOrCreate({ googleId: profile.id }, function (err, user) {\n      return done(err, user);\n    });\n  }\n));\n```\n\n#### Note about Local environment \n\nAvoid usage of Private IP, otherwise you will get the device_id device_name issue for Private IP during authentication.\n\nA workaround consist to set up thru the google cloud console a fully qualified domain name such as http://mydomain:3000/ for the callback\nthen edit your /etc/hosts on your computer and/or vm to point on your private IP. \n\nAlso both sign-in button + callbackURL has to be share the same url, otherwise two cookies will be created and it will lead to lost your session\n\n#### Authenticate Requests\n\nUse `passport.authenticate()`, specifying the `'google'` strategy, to\nauthenticate requests.\n\nFor example, as route middleware in an [Express](http://expressjs.com/)\napplication:\n\n```Javascript\napp.get('/auth/google',\n  passport.authenticate('google', { scope: \n  \t[ 'https://www.googleapis.com/auth/plus.login',\n  \t, 'https://www.googleapis.com/auth/plus.profile.emails.read' ] }\n));\n\napp.get( '/auth/google/callback', \n\tpassport.authenticate( 'google', { \n\t\tsuccessRedirect: '/auth/google/success',\n\t\tfailureRedirect: '/auth/google/failure'\n}));\n```\n\n#### What you will get in profile response ? \n\n```\n   provider         always set to `google`\n   id\n   name\n   displayName\n   birthday\n   relationship\n   isPerson\n   isPlusUser\n   placesLived\n   language\n   emails\n   gender\n   picture\n```\n\n## Examples\n\nFor a complete, working example, refer to the [OAuth 2.0 example](example).\n\n## Credits\n\n  - [Jared Hanson](http://github.com/jaredhanson)\n\n## License\n\n[The MIT License](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2012-2013 Jared Hanson <[http://jaredhanson.net/](http://jaredhanson.net/)>\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mstade/passport-google-oauth2.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "0.1.6"
}
